version: '3.5'
services:
  api1: &api # API - Instância 01
    build: .
    environment:
      PORT: 3000
    depends_on:
      - db 
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.5GB'
            #    network_mode: "host"

  api2: # API - Instância 02
    <<: *api
    environment:
      PORT: 3001 

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.5GB'

  db:
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123123
      POSTGRES_DB: rinhadb
    volumes:
     - ./init.sql:/docker-entrypoint-initdb.d/init.sq
     - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.9'
          memory: '1.4GB'
   

  # postgres:
  #   image: postgres
  #   hostname: db
  #   environment:
  #     POSTGRES_USER: rinha
  #     POSTGRES_PASSWORD: 1234
  #     POSTGRES_DB: rinhadb
  #   volumes:
  #     # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #     - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
  #   command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
  #   network_mode: host
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 20
  #     start_period: 10s
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.9'
  #         memory: '1.4GB'
  #
  #
